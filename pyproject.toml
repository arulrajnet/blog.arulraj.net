[tool.poetry]
name = "blog-arulraj-net"
version = "0.1.0"
description = "My Blog content"
authors = ["Arul <me@arulraj.net>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.12"
pelican = "4.10.2"
markdown = "3.6"
ghp-import = "2.1.0"
invoke = "2.2.0"
pysvg = "0.2.2"
requests = "2.32.3"
pillow = "10.4.0"
beautifulsoup4 = "4.12.3"
pelican-image-process = "3.0.4"
pelican-minify = "2.0.0"
pelican-neighbors = "1.2.0"
pelican-obsidian = {git = "https://github.com/jonathan-s/pelican-obsidian.git", rev = "main"}
pelican-related-posts = "1.0.0"
pelican-seo = "1.2.2"
pelican-sitemap = "1.2.0"
pelican-statistics = "1.0.0"
pelican-webassets = "2.1.0"

[tool.poetry.group.dev.dependencies]
ruff = "0.6.1"
pre-commit = "3.8.0"
pytest = "8.3.2"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    "pelican-plugins",
    "output",
    "outputzip",
    "attila",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.12
target-version = "py312"

[tool.ruff.lint]
# refer the rules https://docs.astral.sh/ruff/rules/
select = [
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "D",    # pydocstyle
    "E",    # pycodestyle
    "ERA",  # flake8-eradicate/eradicate
    "F",    # pyflakes
    "I",    # isort
    "N",    # pep8-naming
    "PIE",  # flake8-pie
    "PGH",  # pygrep
    "RUF",  # ruff checks
    "SIM",  # flake8-simplify
    "T20",  # flake8-print
    "TCH",  # flake8-type-checking
    "TID",  # flake8-tidy-imports
    "UP",   # pyupgrade
]

ignore = [
    "E402",
    "E722",
    "F403",
    "SIM115",
    "SIM117",
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.isort]
known-first-party = ["smartroom"]
length-sort = true
# Use a single line between direct and from import.
lines-between-types = 1
lines-after-imports = 2

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable reformatting of code snippets in docstrings.
docstring-code-format = true
